Index: app/src/main/java/com/example/myapplication/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication\r\n\r\nimport android.Manifest.permission.ACCESS_COARSE_LOCATION\r\nimport android.Manifest.permission.ACCESS_FINE_LOCATION\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.location.Address\r\nimport android.location.Geocoder\r\nimport android.location.Location\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.MenuItem\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.myapplication.databinding.ActivityMainBinding\r\nimport com.example.myapplication.databinding.NavigationHeaderBinding\r\nimport com.google.android.gms.location.FusedLocationProviderClient\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.naver.maps.geometry.LatLng\r\nimport com.naver.maps.geometry.Tm128\r\nimport com.naver.maps.geometry.Tm128.valueOf\r\nimport com.naver.maps.map.*\r\nimport com.naver.maps.map.overlay.Marker\r\nimport com.naver.maps.map.overlay.OverlayImage\r\nimport com.naver.maps.map.util.FusedLocationSource\r\nimport kr.hyosang.coordinate.*\r\nimport retrofit2.Call\r\nimport retrofit2.Response\r\nimport java.io.IOException\r\nimport java.util.*\r\nimport kotlin.properties.Delegates\r\n\r\nclass MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener,\r\n    OnMapReadyCallback {\r\n    lateinit var binding: ActivityMainBinding\r\n    lateinit var _binding : NavigationHeaderBinding\r\n    private lateinit var mapView: MapView\r\n    private lateinit var naverMap: NaverMap\r\n    private var PERMISSION_REQUEST_CODE = 100;\r\n    private val PERMISSIONS = arrayOf(\r\n        ACCESS_FINE_LOCATION,\r\n        ACCESS_COARSE_LOCATION\r\n    )\r\n    private lateinit var mLocationSource: FusedLocationSource\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var marker : Marker\r\n    private val mMarkerList: List<Marker> = ArrayList() //공공데이터에서 불러오는 미세먼지 마커들\r\n\r\n    //현재 TM 좌표\r\n    private var tmX by Delegates.notNull<Double>()\r\n    private var tmY by Delegates.notNull<Double>()\r\n    //현재 위치 저장\r\n    private var lat by Delegates.notNull<Double>()\r\n    private var lon by Delegates.notNull<Double>()\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding= ActivityMainBinding.inflate(layoutInflater)\r\n        _binding = NavigationHeaderBinding.bind(binding.mainDrawer.getHeaderView(0))\r\n\r\n        setContentView(binding.root)\r\n        binding.mainDrawer.setNavigationItemSelectedListener(this)\r\n\r\n        binding.navBtn.setOnClickListener {\r\n               binding.drawer.openDrawer(GravityCompat.START)\r\n        }\r\n\r\n        binding.btnDeliveryVehicle.setOnClickListener {\r\n            // SecondActivity로 이동하는 인텐트 시작\r\n            val intent = Intent(this, SecondActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        // 네이버 지도\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\r\n\r\n        mapView = findViewById(R.id.navermap_view)\r\n        mapView.onCreate(savedInstanceState)\r\n        mapView.getMapAsync(this)\r\n\r\n        // 위치를 반환하는 구현체인 FusedLocationSource 생성\r\n        mLocationSource = FusedLocationSource(this, PERMISSION_REQUEST_CODE)\r\n\r\n        binding.mapsSearch.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n            override fun onQueryTextSubmit(query: String?): Boolean {\r\n\r\n                // 검색 버튼 누를 때 호출\r\n                query?.let {\r\n                    val latLng = getLatLngFromAddress(it)\r\n                    if (latLng != null) {\r\n                        // 마커 위치 변경\r\n                        marker.position = latLng\r\n                        naverMap.moveCamera(CameraUpdate.scrollTo(latLng))\r\n\r\n                        // 주소 가져오기\r\n                        val address = getAddress(latLng.latitude, latLng.longitude)\r\n                        Log.d(\"mobileApp\", address)\r\n                    } else {\r\n                        // 주소를 찾을 수 없는 경우 처리\r\n                    }\r\n                }\r\n                return true\r\n            }\r\n\r\n            override fun onQueryTextChange(newText: String?): Boolean {\r\n                // 검색창에서 글자가 변경이 일어날 때마다 호출\r\n                return true\r\n            }\r\n        })\r\n\r\n\r\n\r\n\r\n    }\r\n    private fun getSidoDust(addr : String) {\r\n        stationFineDust(addr)\r\n    }\r\n/*\r\n    private fun getTmNaver() : Tm128 {\r\n        val point = LatLng(naverMap.cameraPosition.target.latitude, naverMap.cameraPosition.target.longitude)\r\n        val tmPoint = valueOf(point)\r\n        Log.d(\"mobileApp\", \"$tmPoint\")\r\n\r\n        return tmPoint\r\n    }\r\n\r\n\r\n    //좌표계 변환\r\n    private fun getTm(){\r\n        val wgsPt = CoordPoint(naverMap.cameraPosition.target.longitude, naverMap.cameraPosition.target.latitude)\r\n        Log.d(\"mobileApp\", wgsPt.x.toString())\r\n        val tmPt = TransCoord.getTransCoord(wgsPt, TransCoord.COORD_TYPE_WGS84,TransCoord.COORD_TYPE_TM)\r\n        Log.d(\"mobileApp\", tmPt.x.toString())\r\n        tmX = tmPt.x\r\n        tmY = tmPt.y\r\n    }\r\n\r\n    private fun stationDust() { //측정소 API 불러오는 코드\r\n        //var keyword = binding.edtProduct.text.toString()\r\n        val tmPoint = getTmNaver()\r\n        val call: Call<MyModel> = MyApplication.retroInterface.getRetrofit(\r\n            tmPoint.x.toString(),\r\n            tmPoint.y.toString(),\r\n            \"json\",\r\n            \"ubXQmzOKtgQA4qGn1x/X9iibyvbpy3dYpk/GC9EyPZSPqCKUc7FM9xdkGK7xmQaQrZwB0+hIov6JyWPr8SwBBA==\",\r\n            \"1.0\"\r\n        ) //call 객체에 초기화\r\n        Log.d(\"mobileApp\", \"${call.request()}\")\r\n\r\n        call?.enqueue(object: retrofit2.Callback<MyModel> {\r\n            override fun onResponse(call: Call<MyModel>, response: Response<MyModel>) {\r\n                if(response.isSuccessful) {\r\n                    Log.d(\"mobileApp\", \"${response.body()}\")\r\n\r\n                    //binding.retrofitRecyclerView.layoutManager = LinearLayoutManager(context)\r\n                    //binding.\r\n                    //    .adapter = RetrofitAdapter(this, response.body()!!.body.items)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<MyModel>, t: Throwable) {\r\n                Log.d(\"mobileApp\", \"${t.toString()}\")\r\n            }\r\n        })\r\n    }*/\r\n\r\n    private fun stationFineDust(stationName : String) { //미세먼지 API 불러오기\r\n        val call: Call<MyStationModel> = MyApplication.retroInterface2.getRetrofit2(\r\n            stationName, //측정소이름\r\n            \"month\",\r\n            \"1\",\r\n            \"100\",\r\n            \"json\",\r\n            \"ubXQmzOKtgQA4qGn1x/X9iibyvbpy3dYpk/GC9EyPZSPqCKUc7FM9xdkGK7xmQaQrZwB0+hIov6JyWPr8SwBBA==\"\r\n        ) //call 객체에 초기화\r\n        Log.d(\"mobileApp\", \"${call.request()}\")\r\n\r\n        call?.enqueue(object: retrofit2.Callback<MyStationModel> {\r\n            override fun onResponse(call: Call<MyStationModel>, response: Response<MyStationModel>) {\r\n                if(response.isSuccessful) {\r\n                    Log.d(\"mobileApp\", \"${response.body()}\")\r\n                    //binding.retrofitRecyclerView.layoutManager = LinearLayoutManager(context)\r\n                    //binding.retrofitRecyclerView.adapter = MyRetrofitAdapter(this, response.body()!!.body.items)\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<MyStationModel>, t: Throwable) {\r\n                Log.d(\"mobileApp\", \"${t.toString()}\")\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    /*\r\n    private fun fetchFineDust(sidoName: String, searchCondition: String) {\r\n    val retrofit = Retrofit.Builder()\r\n        .baseUrl(DustAPI.BASE_URL)\r\n        .addConverterFactory(GsonConverterFactory.create())\r\n        .build()\r\n    val dustApi = retrofit.create(DustAPI::class.java)\r\n    dustApi.getFineDustbySido(sidoName, searchCondition).enqueue(object : Callback<FineDustResult> {\r\n        override fun onResponse(call: Call<FineDustResult>, response: Response<FineDustResult>) {\r\n            // 200은 성공을 의미합니다.\r\n            if (response.code() == 200) {\r\n                mResult = response.body()\r\n                setDustOnView()\r\n            }\r\n        }\r\n\r\n    override fun onFailure(call: Call<FineDustResult>, t: Throwable) {\r\n\r\n       }\r\n        })\r\n    }\r\n\r\n    //API에서 가져온 가게 좌표마다 marker 띄움\r\n    private fun updateMapMarkers(result: StoreSaleResult) {\r\n        resetMarkerList()\r\n        if (result.stores != null && result.stores.size > 0) {\r\n            for (mask in result.stores) {\r\n                val marker = Marker()\r\n                marker.tag = mask\r\n                marker.position = LatLng(mask.lat, mask.lng)\r\n\r\n                when (mask.remain_stat.toLowerCase()) {\r\n                    \"plenty\" -> marker.icon = OverlayImage.fromResource(R.drawable.marker_green)\r\n                    \"some\" -> marker.icon = OverlayImage.fromResource(R.drawable.marker_yellow)\r\n                    \"few\" -> marker.icon = OverlayImage.fromResource(R.drawable.marker_red)\r\n                    else -> marker.icon = OverlayImage.fromResource(R.drawable.marker_gray)\r\n                }\r\n                marker.anchor = PointF(0.5f, 1.0f)\r\n                marker.map = mnaverMap\r\n                marker.setOnClickListener(this)\r\n                mMarkerList.add(marker)\r\n            }\r\n        }\r\n    }\r\n    */\r\n\r\n    private fun updateNavigationHeader() {\r\n        val headerView = binding.mainDrawer.getHeaderView(0)\r\n        val headerBinding = NavigationHeaderBinding.bind(headerView)\r\n\r\n        if (MyApplication.checkAuth()) {\r\n            headerBinding.headerEmail.text = MyApplication.email\r\n            headerBinding.headerName.text = MyApplication.nickname\r\n        } else {\r\n            headerBinding.headerEmail.text = \"로그인이 필요합니다\"\r\n            headerBinding.headerName.text = \"\"\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        mapView.onResume()\r\n        updateNavigationHeader()\r\n    }\r\n\r\n    override fun onStart(){\r\n        // Intent에서 finish() 돌아올 때 실행\r\n        // onCreate -> onStart -> onCreateOptionsMenu\r\n        super.onStart()\r\n        mapView.onStart()\r\n        if(_binding.headerEmail.text.equals(\"로그인이 필요합니다\")){\r\n            if(MyApplication.checkAuth()){\r\n                _binding.headerEmail!!.text= MyApplication.email\r\n                _binding.headerName!!.text=MyApplication.nickname //있어야 함\r\n            }\r\n            else{\r\n                _binding.headerEmail!!.text = \"로그인이 필요합니다\"\r\n                _binding.headerName!!.text= \"\"\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n  /*  override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if(item.itemId === R.id.menu_auth){\r\n            val intent = Intent(this, AuthActivity::class.java)\r\n            if(_binding.headerName!!.text!!.equals(\"인증\")){\r\n                intent.putExtra(\"data\", \"logout\")\r\n            }\r\n            else{ //이메일, 구글계정\r\n                intent.putExtra(\"data\", \"login\")\r\n            }\r\n            startActivity(intent)\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    } */\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when(item.itemId){\r\n            R.id.item1 -> {Log.d(\"mobileApp\", \"네비게이션 뷰 메뉴 1\")}\r\n            R.id.item2 -> {Log.d(\"mobileApp\", \"네비게이션 뷰 메뉴 2\")}\r\n            R.id.item3 -> {Log.d(\"mobileApp\", \"네비게이션 뷰 메뉴 3\")}\r\n            R.id.item4 -> {\r\n                if(item.itemId === R.id.item4){\r\n                    val intent = Intent(this, AuthActivity::class.java)\r\n                    if(_binding.headerEmail!!.text!!.equals(\"로그인이 필요합니다\")){\r\n                        intent.putExtra(\"data\", \"logout\")\r\n                    }\r\n                    else{ //이메일, 구글계정\r\n                        intent.putExtra(\"data\", \"login\")\r\n                    }\r\n                    startActivity(intent)\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    /*private fun setMark(marker: Marker, lat: Double, lng: Double, resourceID: Int) { //마커 띄우기\r\n        // 원근감 표시\r\n        marker.isIconPerspectiveEnabled = true\r\n        // 아이콘 지정\r\n        marker.icon = OverlayImage.fromResource(resourceID)\r\n        // 마커의 투명도\r\n        marker.alpha = 0.8f\r\n        // 마커 위치\r\n        marker.position = LatLng(lat, lng)\r\n        // 마커 우선순위\r\n        marker.zIndex = 10\r\n        // 마커 표시\r\n        marker.map = naverMap\r\n    }*/\r\n\r\n    override fun onMapReady(naverMap: NaverMap) { //네이버 지도의 이벤트를 처리하는 콜백함수\r\n\r\n        // NaverMap 객체 받아서 NaverMap 객체에 위치 소스 지정\r\n        // 지도상에 마커 표시\r\n        marker = Marker()\r\n        marker.position = LatLng( //마커가 위치한 좌표!!!!! => 여기 기준으로 주소 설정할 수 있도록 해야함\r\n            naverMap.cameraPosition.target.latitude,\r\n            naverMap.cameraPosition.target.longitude\r\n        )\r\n        marker.icon = OverlayImage.fromResource(R.drawable.baseline_place_24)\r\n        marker.map = naverMap\r\n\r\n        this.naverMap = naverMap\r\n        naverMap.locationSource = mLocationSource\r\n        naverMap.setLocationSource(mLocationSource)\r\n\r\n        // 현재 위치 버튼 기능\r\n        naverMap.uiSettings.isLocationButtonEnabled = true\r\n        // 위치를 추적하면서 카메라도 따라 움직인다.\r\n        naverMap.locationTrackingMode = LocationTrackingMode.Follow\r\n        //stationDust()\r\n\r\n        // 권한확인. 결과는 onRequestPermissionsResult 콜백 매서드 호출\r\n        ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_REQUEST_CODE);\r\n\r\n\r\n        /* val cameraPosition = CameraPosition(\r\n            LatLng(37.65178832823347, 127.01614801495204), //위치 지정\r\n            16.0 // 줌레벨 => 추가로 기울임 각도, 방향 설정 가능\r\n        )\r\n        naverMap.cameraPosition = cameraPosition  //최초위치 설정 */\r\n\r\n        // 카메라의 움직임에 대한 이벤트 리스너 인터페이스.\r\n        naverMap.addOnCameraChangeListener { reason, animated ->\r\n            Log.i(\"NaverMap\", \"카메라 변경 - reson: $reason, animated: $animated\")\r\n            marker.position = LatLng(\r\n                // 현재 보이는 네이버맵의 정중앙 가운데로 마커 이동\r\n                naverMap.cameraPosition.target.latitude,\r\n                naverMap.cameraPosition.target.longitude\r\n            )\r\n        }\r\n\r\n        // 카메라의 움직임 종료에 대한 이벤트 리스너 인터페이스.\r\n        naverMap.addOnCameraIdleListener {\r\n            marker.position = LatLng(\r\n                naverMap.cameraPosition.target.latitude,\r\n                naverMap.cameraPosition.target.longitude\r\n            )\r\n            //여기\r\n            val address = getAddress(naverMap.cameraPosition.target.latitude, naverMap.cameraPosition.target.longitude)\r\n            getSidoDust(getSido(address))\r\n            Log.d(\"mobileApp\", getAddress(naverMap.cameraPosition.target.latitude, naverMap.cameraPosition.target.longitude))\r\n        }\r\n\r\n        var currentLocation: Location?\r\n        if (ActivityCompat.checkSelfPermission(\r\n                this,\r\n                ACCESS_FINE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                this,\r\n                ACCESS_COARSE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return\r\n        }\r\n        fusedLocationClient.lastLocation\r\n            .addOnSuccessListener { location: Location? ->\r\n                if (location != null) {\r\n                    currentLocation = location\r\n                    // 위치 오버레이의 가시성은 기본적으로 false로 지정되어 있습니다. 가시성을 true로 변경하면 지도에 위치 오버레이가 나타납니다.\r\n                    // 파랑색 점, 현재 위치 표시\r\n                    naverMap.locationOverlay.run {\r\n                        isVisible = true\r\n                        position = LatLng(currentLocation!!.latitude, currentLocation!!.longitude)\r\n\r\n                    }\r\n\r\n                    // 카메라 현재위치로 이동\r\n                    val cameraUpdate = CameraUpdate.scrollTo(\r\n                        LatLng(\r\n                            currentLocation!!.latitude,\r\n                            currentLocation!!.longitude\r\n                        )\r\n                    )\r\n                    naverMap.moveCamera(cameraUpdate)\r\n\r\n                    // 빨간색 마커 현재위치로 변경\r\n                    marker.position = LatLng(\r\n                        naverMap.cameraPosition.target.latitude,\r\n                        naverMap.cameraPosition.target.longitude\r\n                    )\r\n                }\r\n            }\r\n\r\n        naverMap.addOnLocationChangeListener { location ->\r\n            lat = location.latitude\r\n            lon = location.longitude\r\n            //setMark(marker, lat, lon, R.drawable.baseline_place_24)\r\n            //Log.d(\"mobileApp\", getAddress(lat, lon))\r\n        }\r\n\r\n    }\r\n\r\n    private fun getSido(address : String) :String {\r\n        val words = address.split(\"\\\\s\".toRegex()).toTypedArray()\r\n        Log.d(\"mobileApp\", words[2]) //현위치 구 불러오기\r\n        return words[2]\r\n    }\r\n\r\n    // 좌표 -> 주소 변환\r\n    private fun getAddress(lat: Double, lng: Double): String {\r\n        val geoCoder = Geocoder(this, Locale.KOREA)\r\n        val address: ArrayList<Address>\r\n        var addressResult = \"주소를 가져 올 수 없습니다.\"\r\n        try {\r\n            //세번째 파라미터는 좌표에 대해 주소를 리턴 받는 갯수로\r\n            //한좌표에 대해 두개이상의 이름이 존재할수있기에 주소배열을 리턴받기 위해 최대갯수 설정\r\n            address = geoCoder.getFromLocation(lat, lng, 1) as ArrayList<Address>\r\n            if (address.size > 0) {\r\n                // 주소 받아오기\r\n                val currentLocationAddress = address[0].getAddressLine(0)\r\n                    .toString()\r\n                addressResult = currentLocationAddress\r\n\r\n            }\r\n\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        return addressResult\r\n    }\r\n\r\n    // 주소 -> 좌표 변환\r\n    private fun getLatLngFromAddress(address: String): LatLng? {\r\n        val geocoder = Geocoder(this, Locale.KOREA)\r\n        val addressList = geocoder.getFromLocationName(address, 1)\r\n        return if (addressList != null && addressList.isNotEmpty()) {\r\n            val latitude = addressList[0].latitude\r\n            val longitude = addressList[0].longitude\r\n            LatLng(latitude, longitude)\r\n        } else {\r\n            null\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n\r\n        // request code와 권한획득 여부 확인\r\n        if (requestCode == PERMISSION_REQUEST_CODE) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                naverMap.setLocationTrackingMode(LocationTrackingMode.Follow)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        mapView.onPause()\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        mapView.onStop()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        mapView.onDestroy()\r\n    }\r\n\r\n    override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        mapView.onSaveInstanceState(outState)\r\n    }\r\n\r\n    override fun onLowMemory() {\r\n        super.onLowMemory()\r\n        mapView.onLowMemory()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/myapplication/MainActivity.kt b/app/src/main/java/com/example/myapplication/MainActivity.kt
--- a/app/src/main/java/com/example/myapplication/MainActivity.kt	(revision 5eae65fbf2cada5c928c57291cb8217896726ec4)
+++ b/app/src/main/java/com/example/myapplication/MainActivity.kt	(date 1689670184240)
@@ -378,7 +378,7 @@
             )
             //여기
             val address = getAddress(naverMap.cameraPosition.target.latitude, naverMap.cameraPosition.target.longitude)
-            getSidoDust(getSido(address))
+            getSidoDust(getSido(address)) //*
             Log.d("mobileApp", getAddress(naverMap.cameraPosition.target.latitude, naverMap.cameraPosition.target.longitude))
         }
 
